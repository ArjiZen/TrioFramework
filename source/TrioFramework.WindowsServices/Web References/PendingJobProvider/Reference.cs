//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.0.
// 
using System.Configuration;


#pragma warning disable 1591

namespace Bingosoft.TrioFramework.WindowsServices.PendingJobProvider {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PendingJobIISoap", Namespace="http://eap.sz.gmcc.net/WebService/")]
    public partial class PendingJobII : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AddPendingJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPendingJobTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPendingJobForAbossOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPendingJobBatchOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPendingJobBatchForAbossOperationCompleted;
        
        private System.Threading.SendOrPostCallback FinishPendingJobByJobIDsOperationCompleted;
        
        private System.Threading.SendOrPostCallback FinishPendingJobBySubIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback FinishPendingJobBySubIDAndUserIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback FinishPendingJobByJobIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback FinishPendingJobByJobIDsWithXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePendingJobByJobIDsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePendingJobBySubIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePendingJobBySubIDAndUserIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePendingJobByJobIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePendingJobByJobIDsWithXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPendingJobByUserIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPendingJobByUserIDWithDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPendingJobByEUMUserIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPendingJobByEUMUserIDWithDateOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PendingJobII() {
			this.Url = SettingProvider.PendingJob.ApiUrl;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AddPendingJobCompletedEventHandler AddPendingJobCompleted;
        
        /// <remarks/>
        public event AddPendingJobTestCompletedEventHandler AddPendingJobTestCompleted;
        
        /// <remarks/>
        public event AddPendingJobForAbossCompletedEventHandler AddPendingJobForAbossCompleted;
        
        /// <remarks/>
        public event AddPendingJobBatchCompletedEventHandler AddPendingJobBatchCompleted;
        
        /// <remarks/>
        public event AddPendingJobBatchForAbossCompletedEventHandler AddPendingJobBatchForAbossCompleted;
        
        /// <remarks/>
        public event FinishPendingJobByJobIDsCompletedEventHandler FinishPendingJobByJobIDsCompleted;
        
        /// <remarks/>
        public event FinishPendingJobBySubIDCompletedEventHandler FinishPendingJobBySubIDCompleted;
        
        /// <remarks/>
        public event FinishPendingJobBySubIDAndUserIDCompletedEventHandler FinishPendingJobBySubIDAndUserIDCompleted;
        
        /// <remarks/>
        public event FinishPendingJobByJobIDCompletedEventHandler FinishPendingJobByJobIDCompleted;
        
        /// <remarks/>
        public event FinishPendingJobByJobIDsWithXMLCompletedEventHandler FinishPendingJobByJobIDsWithXMLCompleted;
        
        /// <remarks/>
        public event DeletePendingJobByJobIDsCompletedEventHandler DeletePendingJobByJobIDsCompleted;
        
        /// <remarks/>
        public event DeletePendingJobBySubIDCompletedEventHandler DeletePendingJobBySubIDCompleted;
        
        /// <remarks/>
        public event DeletePendingJobBySubIDAndUserIDCompletedEventHandler DeletePendingJobBySubIDAndUserIDCompleted;
        
        /// <remarks/>
        public event DeletePendingJobByJobIDCompletedEventHandler DeletePendingJobByJobIDCompleted;
        
        /// <remarks/>
        public event DeletePendingJobByJobIDsWithXMLCompletedEventHandler DeletePendingJobByJobIDsWithXMLCompleted;
        
        /// <remarks/>
        public event GetPendingJobByUserIDCompletedEventHandler GetPendingJobByUserIDCompleted;
        
        /// <remarks/>
        public event GetPendingJobByUserIDWithDateCompletedEventHandler GetPendingJobByUserIDWithDateCompleted;
        
        /// <remarks/>
        public event GetPendingJobByEUMUserIDCompletedEventHandler GetPendingJobByEUMUserIDCompleted;
        
        /// <remarks/>
        public event GetPendingJobByEUMUserIDWithDateCompletedEventHandler GetPendingJobByEUMUserIDWithDateCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eap.sz.gmcc.net/WebService/AddPendingJob", RequestNamespace="http://eap.sz.gmcc.net/WebService/", ResponseNamespace="http://eap.sz.gmcc.net/WebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddPendingJob(string UserID, ref string JobID, string JobTitle, string JobURL, string TriggerEmployeeNo, string TriggerUserName, string SubID, string AppID, string AppName, string NotifyUserIDs, int NotifyChannel, string NotifyTitle, string NotifyContent, short IsAcceptResponse) {
            object[] results = this.Invoke("AddPendingJob", new object[] {
                        UserID,
                        JobID,
                        JobTitle,
                        JobURL,
                        TriggerEmployeeNo,
                        TriggerUserName,
                        SubID,
                        AppID,
                        AppName,
                        NotifyUserIDs,
                        NotifyChannel,
                        NotifyTitle,
                        NotifyContent,
                        IsAcceptResponse});
            JobID = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddPendingJobAsync(string UserID, string JobID, string JobTitle, string JobURL, string TriggerEmployeeNo, string TriggerUserName, string SubID, string AppID, string AppName, string NotifyUserIDs, int NotifyChannel, string NotifyTitle, string NotifyContent, short IsAcceptResponse) {
            this.AddPendingJobAsync(UserID, JobID, JobTitle, JobURL, TriggerEmployeeNo, TriggerUserName, SubID, AppID, AppName, NotifyUserIDs, NotifyChannel, NotifyTitle, NotifyContent, IsAcceptResponse, null);
        }
        
        /// <remarks/>
        public void AddPendingJobAsync(string UserID, string JobID, string JobTitle, string JobURL, string TriggerEmployeeNo, string TriggerUserName, string SubID, string AppID, string AppName, string NotifyUserIDs, int NotifyChannel, string NotifyTitle, string NotifyContent, short IsAcceptResponse, object userState) {
            if ((this.AddPendingJobOperationCompleted == null)) {
                this.AddPendingJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPendingJobOperationCompleted);
            }
            this.InvokeAsync("AddPendingJob", new object[] {
                        UserID,
                        JobID,
                        JobTitle,
                        JobURL,
                        TriggerEmployeeNo,
                        TriggerUserName,
                        SubID,
                        AppID,
                        AppName,
                        NotifyUserIDs,
                        NotifyChannel,
                        NotifyTitle,
                        NotifyContent,
                        IsAcceptResponse}, this.AddPendingJobOperationCompleted, userState);
        }
        
        private void OnAddPendingJobOperationCompleted(object arg) {
            if ((this.AddPendingJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPendingJobCompleted(this, new AddPendingJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eap.sz.gmcc.net/WebService/AddPendingJobTest", RequestNamespace="http://eap.sz.gmcc.net/WebService/", ResponseNamespace="http://eap.sz.gmcc.net/WebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddPendingJobTest(string UserID, string JobID, string JobTitle, string JobURL, string TriggerUserName, string TriggerEmployeeNo, string SubID, string AppID, string AppName, string NotifyUserIDs, int NotifyChannel, string NotifyTitle, string NotifyContent, short IsAcceptResponse) {
            object[] results = this.Invoke("AddPendingJobTest", new object[] {
                        UserID,
                        JobID,
                        JobTitle,
                        JobURL,
                        TriggerUserName,
                        TriggerEmployeeNo,
                        SubID,
                        AppID,
                        AppName,
                        NotifyUserIDs,
                        NotifyChannel,
                        NotifyTitle,
                        NotifyContent,
                        IsAcceptResponse});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddPendingJobTestAsync(string UserID, string JobID, string JobTitle, string JobURL, string TriggerUserName, string TriggerEmployeeNo, string SubID, string AppID, string AppName, string NotifyUserIDs, int NotifyChannel, string NotifyTitle, string NotifyContent, short IsAcceptResponse) {
            this.AddPendingJobTestAsync(UserID, JobID, JobTitle, JobURL, TriggerUserName, TriggerEmployeeNo, SubID, AppID, AppName, NotifyUserIDs, NotifyChannel, NotifyTitle, NotifyContent, IsAcceptResponse, null);
        }
        
        /// <remarks/>
        public void AddPendingJobTestAsync(string UserID, string JobID, string JobTitle, string JobURL, string TriggerUserName, string TriggerEmployeeNo, string SubID, string AppID, string AppName, string NotifyUserIDs, int NotifyChannel, string NotifyTitle, string NotifyContent, short IsAcceptResponse, object userState) {
            if ((this.AddPendingJobTestOperationCompleted == null)) {
                this.AddPendingJobTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPendingJobTestOperationCompleted);
            }
            this.InvokeAsync("AddPendingJobTest", new object[] {
                        UserID,
                        JobID,
                        JobTitle,
                        JobURL,
                        TriggerUserName,
                        TriggerEmployeeNo,
                        SubID,
                        AppID,
                        AppName,
                        NotifyUserIDs,
                        NotifyChannel,
                        NotifyTitle,
                        NotifyContent,
                        IsAcceptResponse}, this.AddPendingJobTestOperationCompleted, userState);
        }
        
        private void OnAddPendingJobTestOperationCompleted(object arg) {
            if ((this.AddPendingJobTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPendingJobTestCompleted(this, new AddPendingJobTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eap.sz.gmcc.net/WebService/AddPendingJobForAboss", RequestNamespace="http://eap.sz.gmcc.net/WebService/", ResponseNamespace="http://eap.sz.gmcc.net/WebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddPendingJobForAboss(string AbossLoginName, string JobTitle, string JobURL, string TriggerAbossLoginName, string TriggerUserName, string SubID, string AppID, string AppName, string NotifyAbossLoginNames, int NotifyChannel, string NotifyTitle, string NotifyContent, short IsAcceptResponse) {
            object[] results = this.Invoke("AddPendingJobForAboss", new object[] {
                        AbossLoginName,
                        JobTitle,
                        JobURL,
                        TriggerAbossLoginName,
                        TriggerUserName,
                        SubID,
                        AppID,
                        AppName,
                        NotifyAbossLoginNames,
                        NotifyChannel,
                        NotifyTitle,
                        NotifyContent,
                        IsAcceptResponse});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddPendingJobForAbossAsync(string AbossLoginName, string JobTitle, string JobURL, string TriggerAbossLoginName, string TriggerUserName, string SubID, string AppID, string AppName, string NotifyAbossLoginNames, int NotifyChannel, string NotifyTitle, string NotifyContent, short IsAcceptResponse) {
            this.AddPendingJobForAbossAsync(AbossLoginName, JobTitle, JobURL, TriggerAbossLoginName, TriggerUserName, SubID, AppID, AppName, NotifyAbossLoginNames, NotifyChannel, NotifyTitle, NotifyContent, IsAcceptResponse, null);
        }
        
        /// <remarks/>
        public void AddPendingJobForAbossAsync(string AbossLoginName, string JobTitle, string JobURL, string TriggerAbossLoginName, string TriggerUserName, string SubID, string AppID, string AppName, string NotifyAbossLoginNames, int NotifyChannel, string NotifyTitle, string NotifyContent, short IsAcceptResponse, object userState) {
            if ((this.AddPendingJobForAbossOperationCompleted == null)) {
                this.AddPendingJobForAbossOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPendingJobForAbossOperationCompleted);
            }
            this.InvokeAsync("AddPendingJobForAboss", new object[] {
                        AbossLoginName,
                        JobTitle,
                        JobURL,
                        TriggerAbossLoginName,
                        TriggerUserName,
                        SubID,
                        AppID,
                        AppName,
                        NotifyAbossLoginNames,
                        NotifyChannel,
                        NotifyTitle,
                        NotifyContent,
                        IsAcceptResponse}, this.AddPendingJobForAbossOperationCompleted, userState);
        }
        
        private void OnAddPendingJobForAbossOperationCompleted(object arg) {
            if ((this.AddPendingJobForAbossCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPendingJobForAbossCompleted(this, new AddPendingJobForAbossCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eap.sz.gmcc.net/WebService/AddPendingJobBatch", RequestNamespace="http://eap.sz.gmcc.net/WebService/", ResponseNamespace="http://eap.sz.gmcc.net/WebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddPendingJobBatch(string pendingJobsXML) {
            object[] results = this.Invoke("AddPendingJobBatch", new object[] {
                        pendingJobsXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddPendingJobBatchAsync(string pendingJobsXML) {
            this.AddPendingJobBatchAsync(pendingJobsXML, null);
        }
        
        /// <remarks/>
        public void AddPendingJobBatchAsync(string pendingJobsXML, object userState) {
            if ((this.AddPendingJobBatchOperationCompleted == null)) {
                this.AddPendingJobBatchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPendingJobBatchOperationCompleted);
            }
            this.InvokeAsync("AddPendingJobBatch", new object[] {
                        pendingJobsXML}, this.AddPendingJobBatchOperationCompleted, userState);
        }
        
        private void OnAddPendingJobBatchOperationCompleted(object arg) {
            if ((this.AddPendingJobBatchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPendingJobBatchCompleted(this, new AddPendingJobBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eap.sz.gmcc.net/WebService/AddPendingJobBatchForAboss", RequestNamespace="http://eap.sz.gmcc.net/WebService/", ResponseNamespace="http://eap.sz.gmcc.net/WebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddPendingJobBatchForAboss(string pendingJobsXML) {
            object[] results = this.Invoke("AddPendingJobBatchForAboss", new object[] {
                        pendingJobsXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddPendingJobBatchForAbossAsync(string pendingJobsXML) {
            this.AddPendingJobBatchForAbossAsync(pendingJobsXML, null);
        }
        
        /// <remarks/>
        public void AddPendingJobBatchForAbossAsync(string pendingJobsXML, object userState) {
            if ((this.AddPendingJobBatchForAbossOperationCompleted == null)) {
                this.AddPendingJobBatchForAbossOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPendingJobBatchForAbossOperationCompleted);
            }
            this.InvokeAsync("AddPendingJobBatchForAboss", new object[] {
                        pendingJobsXML}, this.AddPendingJobBatchForAbossOperationCompleted, userState);
        }
        
        private void OnAddPendingJobBatchForAbossOperationCompleted(object arg) {
            if ((this.AddPendingJobBatchForAbossCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPendingJobBatchForAbossCompleted(this, new AddPendingJobBatchForAbossCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eap.sz.gmcc.net/WebService/FinishPendingJobByJobIDs", RequestNamespace="http://eap.sz.gmcc.net/WebService/", ResponseNamespace="http://eap.sz.gmcc.net/WebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FinishPendingJobByJobIDs(string JobIDs) {
            object[] results = this.Invoke("FinishPendingJobByJobIDs", new object[] {
                        JobIDs});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FinishPendingJobByJobIDsAsync(string JobIDs) {
            this.FinishPendingJobByJobIDsAsync(JobIDs, null);
        }
        
        /// <remarks/>
        public void FinishPendingJobByJobIDsAsync(string JobIDs, object userState) {
            if ((this.FinishPendingJobByJobIDsOperationCompleted == null)) {
                this.FinishPendingJobByJobIDsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFinishPendingJobByJobIDsOperationCompleted);
            }
            this.InvokeAsync("FinishPendingJobByJobIDs", new object[] {
                        JobIDs}, this.FinishPendingJobByJobIDsOperationCompleted, userState);
        }
        
        private void OnFinishPendingJobByJobIDsOperationCompleted(object arg) {
            if ((this.FinishPendingJobByJobIDsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FinishPendingJobByJobIDsCompleted(this, new FinishPendingJobByJobIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eap.sz.gmcc.net/WebService/FinishPendingJobBySubID", RequestNamespace="http://eap.sz.gmcc.net/WebService/", ResponseNamespace="http://eap.sz.gmcc.net/WebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FinishPendingJobBySubID(string SystemID, string SubID) {
            object[] results = this.Invoke("FinishPendingJobBySubID", new object[] {
                        SystemID,
                        SubID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FinishPendingJobBySubIDAsync(string SystemID, string SubID) {
            this.FinishPendingJobBySubIDAsync(SystemID, SubID, null);
        }
        
        /// <remarks/>
        public void FinishPendingJobBySubIDAsync(string SystemID, string SubID, object userState) {
            if ((this.FinishPendingJobBySubIDOperationCompleted == null)) {
                this.FinishPendingJobBySubIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFinishPendingJobBySubIDOperationCompleted);
            }
            this.InvokeAsync("FinishPendingJobBySubID", new object[] {
                        SystemID,
                        SubID}, this.FinishPendingJobBySubIDOperationCompleted, userState);
        }
        
        private void OnFinishPendingJobBySubIDOperationCompleted(object arg) {
            if ((this.FinishPendingJobBySubIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FinishPendingJobBySubIDCompleted(this, new FinishPendingJobBySubIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eap.sz.gmcc.net/WebService/FinishPendingJobBySubIDAndUserID", RequestNamespace="http://eap.sz.gmcc.net/WebService/", ResponseNamespace="http://eap.sz.gmcc.net/WebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FinishPendingJobBySubIDAndUserID(string SystemID, string SubID, string UserID) {
            object[] results = this.Invoke("FinishPendingJobBySubIDAndUserID", new object[] {
                        SystemID,
                        SubID,
                        UserID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FinishPendingJobBySubIDAndUserIDAsync(string SystemID, string SubID, string UserID) {
            this.FinishPendingJobBySubIDAndUserIDAsync(SystemID, SubID, UserID, null);
        }
        
        /// <remarks/>
        public void FinishPendingJobBySubIDAndUserIDAsync(string SystemID, string SubID, string UserID, object userState) {
            if ((this.FinishPendingJobBySubIDAndUserIDOperationCompleted == null)) {
                this.FinishPendingJobBySubIDAndUserIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFinishPendingJobBySubIDAndUserIDOperationCompleted);
            }
            this.InvokeAsync("FinishPendingJobBySubIDAndUserID", new object[] {
                        SystemID,
                        SubID,
                        UserID}, this.FinishPendingJobBySubIDAndUserIDOperationCompleted, userState);
        }
        
        private void OnFinishPendingJobBySubIDAndUserIDOperationCompleted(object arg) {
            if ((this.FinishPendingJobBySubIDAndUserIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FinishPendingJobBySubIDAndUserIDCompleted(this, new FinishPendingJobBySubIDAndUserIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eap.sz.gmcc.net/WebService/FinishPendingJobByJobID", RequestNamespace="http://eap.sz.gmcc.net/WebService/", ResponseNamespace="http://eap.sz.gmcc.net/WebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FinishPendingJobByJobID(string JobID, ref HandleResult JobHandleResult, int NotifyChannel, string NotifyUserIDs, string NotifyTitle, string NotifyContent, short IsAcceptResponse) {
            object[] results = this.Invoke("FinishPendingJobByJobID", new object[] {
                        JobID,
                        JobHandleResult,
                        NotifyChannel,
                        NotifyUserIDs,
                        NotifyTitle,
                        NotifyContent,
                        IsAcceptResponse});
            JobHandleResult = ((HandleResult)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FinishPendingJobByJobIDAsync(string JobID, HandleResult JobHandleResult, int NotifyChannel, string NotifyUserIDs, string NotifyTitle, string NotifyContent, short IsAcceptResponse) {
            this.FinishPendingJobByJobIDAsync(JobID, JobHandleResult, NotifyChannel, NotifyUserIDs, NotifyTitle, NotifyContent, IsAcceptResponse, null);
        }
        
        /// <remarks/>
        public void FinishPendingJobByJobIDAsync(string JobID, HandleResult JobHandleResult, int NotifyChannel, string NotifyUserIDs, string NotifyTitle, string NotifyContent, short IsAcceptResponse, object userState) {
            if ((this.FinishPendingJobByJobIDOperationCompleted == null)) {
                this.FinishPendingJobByJobIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFinishPendingJobByJobIDOperationCompleted);
            }
            this.InvokeAsync("FinishPendingJobByJobID", new object[] {
                        JobID,
                        JobHandleResult,
                        NotifyChannel,
                        NotifyUserIDs,
                        NotifyTitle,
                        NotifyContent,
                        IsAcceptResponse}, this.FinishPendingJobByJobIDOperationCompleted, userState);
        }
        
        private void OnFinishPendingJobByJobIDOperationCompleted(object arg) {
            if ((this.FinishPendingJobByJobIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FinishPendingJobByJobIDCompleted(this, new FinishPendingJobByJobIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eap.sz.gmcc.net/WebService/FinishPendingJobByJobIDsWithXML", RequestNamespace="http://eap.sz.gmcc.net/WebService/", ResponseNamespace="http://eap.sz.gmcc.net/WebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FinishPendingJobByJobIDsWithXML(string pendingJobsXML) {
            object[] results = this.Invoke("FinishPendingJobByJobIDsWithXML", new object[] {
                        pendingJobsXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FinishPendingJobByJobIDsWithXMLAsync(string pendingJobsXML) {
            this.FinishPendingJobByJobIDsWithXMLAsync(pendingJobsXML, null);
        }
        
        /// <remarks/>
        public void FinishPendingJobByJobIDsWithXMLAsync(string pendingJobsXML, object userState) {
            if ((this.FinishPendingJobByJobIDsWithXMLOperationCompleted == null)) {
                this.FinishPendingJobByJobIDsWithXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFinishPendingJobByJobIDsWithXMLOperationCompleted);
            }
            this.InvokeAsync("FinishPendingJobByJobIDsWithXML", new object[] {
                        pendingJobsXML}, this.FinishPendingJobByJobIDsWithXMLOperationCompleted, userState);
        }
        
        private void OnFinishPendingJobByJobIDsWithXMLOperationCompleted(object arg) {
            if ((this.FinishPendingJobByJobIDsWithXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FinishPendingJobByJobIDsWithXMLCompleted(this, new FinishPendingJobByJobIDsWithXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eap.sz.gmcc.net/WebService/DeletePendingJobByJobIDs", RequestNamespace="http://eap.sz.gmcc.net/WebService/", ResponseNamespace="http://eap.sz.gmcc.net/WebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeletePendingJobByJobIDs(string JobIDs) {
            object[] results = this.Invoke("DeletePendingJobByJobIDs", new object[] {
                        JobIDs});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeletePendingJobByJobIDsAsync(string JobIDs) {
            this.DeletePendingJobByJobIDsAsync(JobIDs, null);
        }
        
        /// <remarks/>
        public void DeletePendingJobByJobIDsAsync(string JobIDs, object userState) {
            if ((this.DeletePendingJobByJobIDsOperationCompleted == null)) {
                this.DeletePendingJobByJobIDsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePendingJobByJobIDsOperationCompleted);
            }
            this.InvokeAsync("DeletePendingJobByJobIDs", new object[] {
                        JobIDs}, this.DeletePendingJobByJobIDsOperationCompleted, userState);
        }
        
        private void OnDeletePendingJobByJobIDsOperationCompleted(object arg) {
            if ((this.DeletePendingJobByJobIDsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePendingJobByJobIDsCompleted(this, new DeletePendingJobByJobIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eap.sz.gmcc.net/WebService/DeletePendingJobBySubID", RequestNamespace="http://eap.sz.gmcc.net/WebService/", ResponseNamespace="http://eap.sz.gmcc.net/WebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeletePendingJobBySubID(string SystemID, string SubID) {
            object[] results = this.Invoke("DeletePendingJobBySubID", new object[] {
                        SystemID,
                        SubID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeletePendingJobBySubIDAsync(string SystemID, string SubID) {
            this.DeletePendingJobBySubIDAsync(SystemID, SubID, null);
        }
        
        /// <remarks/>
        public void DeletePendingJobBySubIDAsync(string SystemID, string SubID, object userState) {
            if ((this.DeletePendingJobBySubIDOperationCompleted == null)) {
                this.DeletePendingJobBySubIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePendingJobBySubIDOperationCompleted);
            }
            this.InvokeAsync("DeletePendingJobBySubID", new object[] {
                        SystemID,
                        SubID}, this.DeletePendingJobBySubIDOperationCompleted, userState);
        }
        
        private void OnDeletePendingJobBySubIDOperationCompleted(object arg) {
            if ((this.DeletePendingJobBySubIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePendingJobBySubIDCompleted(this, new DeletePendingJobBySubIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eap.sz.gmcc.net/WebService/DeletePendingJobBySubIDAndUserID", RequestNamespace="http://eap.sz.gmcc.net/WebService/", ResponseNamespace="http://eap.sz.gmcc.net/WebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeletePendingJobBySubIDAndUserID(string SystemID, string SubID, string UserID) {
            object[] results = this.Invoke("DeletePendingJobBySubIDAndUserID", new object[] {
                        SystemID,
                        SubID,
                        UserID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeletePendingJobBySubIDAndUserIDAsync(string SystemID, string SubID, string UserID) {
            this.DeletePendingJobBySubIDAndUserIDAsync(SystemID, SubID, UserID, null);
        }
        
        /// <remarks/>
        public void DeletePendingJobBySubIDAndUserIDAsync(string SystemID, string SubID, string UserID, object userState) {
            if ((this.DeletePendingJobBySubIDAndUserIDOperationCompleted == null)) {
                this.DeletePendingJobBySubIDAndUserIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePendingJobBySubIDAndUserIDOperationCompleted);
            }
            this.InvokeAsync("DeletePendingJobBySubIDAndUserID", new object[] {
                        SystemID,
                        SubID,
                        UserID}, this.DeletePendingJobBySubIDAndUserIDOperationCompleted, userState);
        }
        
        private void OnDeletePendingJobBySubIDAndUserIDOperationCompleted(object arg) {
            if ((this.DeletePendingJobBySubIDAndUserIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePendingJobBySubIDAndUserIDCompleted(this, new DeletePendingJobBySubIDAndUserIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eap.sz.gmcc.net/WebService/DeletePendingJobByJobID", RequestNamespace="http://eap.sz.gmcc.net/WebService/", ResponseNamespace="http://eap.sz.gmcc.net/WebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeletePendingJobByJobID(string JobID, int NotifyChannel, string NotifyUserIDs, string NotifyTitle, string NotifyContent, short IsAcceptResponse) {
            object[] results = this.Invoke("DeletePendingJobByJobID", new object[] {
                        JobID,
                        NotifyChannel,
                        NotifyUserIDs,
                        NotifyTitle,
                        NotifyContent,
                        IsAcceptResponse});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeletePendingJobByJobIDAsync(string JobID, int NotifyChannel, string NotifyUserIDs, string NotifyTitle, string NotifyContent, short IsAcceptResponse) {
            this.DeletePendingJobByJobIDAsync(JobID, NotifyChannel, NotifyUserIDs, NotifyTitle, NotifyContent, IsAcceptResponse, null);
        }
        
        /// <remarks/>
        public void DeletePendingJobByJobIDAsync(string JobID, int NotifyChannel, string NotifyUserIDs, string NotifyTitle, string NotifyContent, short IsAcceptResponse, object userState) {
            if ((this.DeletePendingJobByJobIDOperationCompleted == null)) {
                this.DeletePendingJobByJobIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePendingJobByJobIDOperationCompleted);
            }
            this.InvokeAsync("DeletePendingJobByJobID", new object[] {
                        JobID,
                        NotifyChannel,
                        NotifyUserIDs,
                        NotifyTitle,
                        NotifyContent,
                        IsAcceptResponse}, this.DeletePendingJobByJobIDOperationCompleted, userState);
        }
        
        private void OnDeletePendingJobByJobIDOperationCompleted(object arg) {
            if ((this.DeletePendingJobByJobIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePendingJobByJobIDCompleted(this, new DeletePendingJobByJobIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eap.sz.gmcc.net/WebService/DeletePendingJobByJobIDsWithXML", RequestNamespace="http://eap.sz.gmcc.net/WebService/", ResponseNamespace="http://eap.sz.gmcc.net/WebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeletePendingJobByJobIDsWithXML(string pendingJobsXML) {
            object[] results = this.Invoke("DeletePendingJobByJobIDsWithXML", new object[] {
                        pendingJobsXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeletePendingJobByJobIDsWithXMLAsync(string pendingJobsXML) {
            this.DeletePendingJobByJobIDsWithXMLAsync(pendingJobsXML, null);
        }
        
        /// <remarks/>
        public void DeletePendingJobByJobIDsWithXMLAsync(string pendingJobsXML, object userState) {
            if ((this.DeletePendingJobByJobIDsWithXMLOperationCompleted == null)) {
                this.DeletePendingJobByJobIDsWithXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePendingJobByJobIDsWithXMLOperationCompleted);
            }
            this.InvokeAsync("DeletePendingJobByJobIDsWithXML", new object[] {
                        pendingJobsXML}, this.DeletePendingJobByJobIDsWithXMLOperationCompleted, userState);
        }
        
        private void OnDeletePendingJobByJobIDsWithXMLOperationCompleted(object arg) {
            if ((this.DeletePendingJobByJobIDsWithXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePendingJobByJobIDsWithXMLCompleted(this, new DeletePendingJobByJobIDsWithXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eap.sz.gmcc.net/WebService/GetPendingJobByUserID", RequestNamespace="http://eap.sz.gmcc.net/WebService/", ResponseNamespace="http://eap.sz.gmcc.net/WebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPendingJobByUserID(string UserID) {
            object[] results = this.Invoke("GetPendingJobByUserID", new object[] {
                        UserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPendingJobByUserIDAsync(string UserID) {
            this.GetPendingJobByUserIDAsync(UserID, null);
        }
        
        /// <remarks/>
        public void GetPendingJobByUserIDAsync(string UserID, object userState) {
            if ((this.GetPendingJobByUserIDOperationCompleted == null)) {
                this.GetPendingJobByUserIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPendingJobByUserIDOperationCompleted);
            }
            this.InvokeAsync("GetPendingJobByUserID", new object[] {
                        UserID}, this.GetPendingJobByUserIDOperationCompleted, userState);
        }
        
        private void OnGetPendingJobByUserIDOperationCompleted(object arg) {
            if ((this.GetPendingJobByUserIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPendingJobByUserIDCompleted(this, new GetPendingJobByUserIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eap.sz.gmcc.net/WebService/GetPendingJobByUserIDWithDate", RequestNamespace="http://eap.sz.gmcc.net/WebService/", ResponseNamespace="http://eap.sz.gmcc.net/WebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPendingJobByUserIDWithDate(string UserID, System.DateTime StartDateTime, System.DateTime EndDateTime) {
            object[] results = this.Invoke("GetPendingJobByUserIDWithDate", new object[] {
                        UserID,
                        StartDateTime,
                        EndDateTime});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPendingJobByUserIDWithDateAsync(string UserID, System.DateTime StartDateTime, System.DateTime EndDateTime) {
            this.GetPendingJobByUserIDWithDateAsync(UserID, StartDateTime, EndDateTime, null);
        }
        
        /// <remarks/>
        public void GetPendingJobByUserIDWithDateAsync(string UserID, System.DateTime StartDateTime, System.DateTime EndDateTime, object userState) {
            if ((this.GetPendingJobByUserIDWithDateOperationCompleted == null)) {
                this.GetPendingJobByUserIDWithDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPendingJobByUserIDWithDateOperationCompleted);
            }
            this.InvokeAsync("GetPendingJobByUserIDWithDate", new object[] {
                        UserID,
                        StartDateTime,
                        EndDateTime}, this.GetPendingJobByUserIDWithDateOperationCompleted, userState);
        }
        
        private void OnGetPendingJobByUserIDWithDateOperationCompleted(object arg) {
            if ((this.GetPendingJobByUserIDWithDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPendingJobByUserIDWithDateCompleted(this, new GetPendingJobByUserIDWithDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eap.sz.gmcc.net/WebService/GetPendingJobByEUMUserID", RequestNamespace="http://eap.sz.gmcc.net/WebService/", ResponseNamespace="http://eap.sz.gmcc.net/WebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPendingJobByEUMUserID(string EUMUserID) {
            object[] results = this.Invoke("GetPendingJobByEUMUserID", new object[] {
                        EUMUserID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPendingJobByEUMUserIDAsync(string EUMUserID) {
            this.GetPendingJobByEUMUserIDAsync(EUMUserID, null);
        }
        
        /// <remarks/>
        public void GetPendingJobByEUMUserIDAsync(string EUMUserID, object userState) {
            if ((this.GetPendingJobByEUMUserIDOperationCompleted == null)) {
                this.GetPendingJobByEUMUserIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPendingJobByEUMUserIDOperationCompleted);
            }
            this.InvokeAsync("GetPendingJobByEUMUserID", new object[] {
                        EUMUserID}, this.GetPendingJobByEUMUserIDOperationCompleted, userState);
        }
        
        private void OnGetPendingJobByEUMUserIDOperationCompleted(object arg) {
            if ((this.GetPendingJobByEUMUserIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPendingJobByEUMUserIDCompleted(this, new GetPendingJobByEUMUserIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eap.sz.gmcc.net/WebService/GetPendingJobByEUMUserIDWithDate", RequestNamespace="http://eap.sz.gmcc.net/WebService/", ResponseNamespace="http://eap.sz.gmcc.net/WebService/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPendingJobByEUMUserIDWithDate(string EUMUserID, System.DateTime StartDateTime, System.DateTime EndDateTime) {
            object[] results = this.Invoke("GetPendingJobByEUMUserIDWithDate", new object[] {
                        EUMUserID,
                        StartDateTime,
                        EndDateTime});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPendingJobByEUMUserIDWithDateAsync(string EUMUserID, System.DateTime StartDateTime, System.DateTime EndDateTime) {
            this.GetPendingJobByEUMUserIDWithDateAsync(EUMUserID, StartDateTime, EndDateTime, null);
        }
        
        /// <remarks/>
        public void GetPendingJobByEUMUserIDWithDateAsync(string EUMUserID, System.DateTime StartDateTime, System.DateTime EndDateTime, object userState) {
            if ((this.GetPendingJobByEUMUserIDWithDateOperationCompleted == null)) {
                this.GetPendingJobByEUMUserIDWithDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPendingJobByEUMUserIDWithDateOperationCompleted);
            }
            this.InvokeAsync("GetPendingJobByEUMUserIDWithDate", new object[] {
                        EUMUserID,
                        StartDateTime,
                        EndDateTime}, this.GetPendingJobByEUMUserIDWithDateOperationCompleted, userState);
        }
        
        private void OnGetPendingJobByEUMUserIDWithDateOperationCompleted(object arg) {
            if ((this.GetPendingJobByEUMUserIDWithDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPendingJobByEUMUserIDWithDateCompleted(this, new GetPendingJobByEUMUserIDWithDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://eap.sz.gmcc.net/WebService/")]
    public partial class HandleResult {
        
        private bool resultField;
        
        private string resultCodeField;
        
        private string resultInfoField;
        
        private string jobOrReadingIDField;
        
        /// <remarks/>
        public bool Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public string ResultCode {
            get {
                return this.resultCodeField;
            }
            set {
                this.resultCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ResultInfo {
            get {
                return this.resultInfoField;
            }
            set {
                this.resultInfoField = value;
            }
        }
        
        /// <remarks/>
        public string JobOrReadingID {
            get {
                return this.jobOrReadingIDField;
            }
            set {
                this.jobOrReadingIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void AddPendingJobCompletedEventHandler(object sender, AddPendingJobCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPendingJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPendingJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string JobID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void AddPendingJobTestCompletedEventHandler(object sender, AddPendingJobTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPendingJobTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPendingJobTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void AddPendingJobForAbossCompletedEventHandler(object sender, AddPendingJobForAbossCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPendingJobForAbossCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPendingJobForAbossCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void AddPendingJobBatchCompletedEventHandler(object sender, AddPendingJobBatchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPendingJobBatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPendingJobBatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void AddPendingJobBatchForAbossCompletedEventHandler(object sender, AddPendingJobBatchForAbossCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPendingJobBatchForAbossCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPendingJobBatchForAbossCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void FinishPendingJobByJobIDsCompletedEventHandler(object sender, FinishPendingJobByJobIDsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FinishPendingJobByJobIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FinishPendingJobByJobIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void FinishPendingJobBySubIDCompletedEventHandler(object sender, FinishPendingJobBySubIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FinishPendingJobBySubIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FinishPendingJobBySubIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void FinishPendingJobBySubIDAndUserIDCompletedEventHandler(object sender, FinishPendingJobBySubIDAndUserIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FinishPendingJobBySubIDAndUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FinishPendingJobBySubIDAndUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void FinishPendingJobByJobIDCompletedEventHandler(object sender, FinishPendingJobByJobIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FinishPendingJobByJobIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FinishPendingJobByJobIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public HandleResult JobHandleResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((HandleResult)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void FinishPendingJobByJobIDsWithXMLCompletedEventHandler(object sender, FinishPendingJobByJobIDsWithXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FinishPendingJobByJobIDsWithXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FinishPendingJobByJobIDsWithXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void DeletePendingJobByJobIDsCompletedEventHandler(object sender, DeletePendingJobByJobIDsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeletePendingJobByJobIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeletePendingJobByJobIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void DeletePendingJobBySubIDCompletedEventHandler(object sender, DeletePendingJobBySubIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeletePendingJobBySubIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeletePendingJobBySubIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void DeletePendingJobBySubIDAndUserIDCompletedEventHandler(object sender, DeletePendingJobBySubIDAndUserIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeletePendingJobBySubIDAndUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeletePendingJobBySubIDAndUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void DeletePendingJobByJobIDCompletedEventHandler(object sender, DeletePendingJobByJobIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeletePendingJobByJobIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeletePendingJobByJobIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void DeletePendingJobByJobIDsWithXMLCompletedEventHandler(object sender, DeletePendingJobByJobIDsWithXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeletePendingJobByJobIDsWithXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeletePendingJobByJobIDsWithXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetPendingJobByUserIDCompletedEventHandler(object sender, GetPendingJobByUserIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPendingJobByUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPendingJobByUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetPendingJobByUserIDWithDateCompletedEventHandler(object sender, GetPendingJobByUserIDWithDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPendingJobByUserIDWithDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPendingJobByUserIDWithDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetPendingJobByEUMUserIDCompletedEventHandler(object sender, GetPendingJobByEUMUserIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPendingJobByEUMUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPendingJobByEUMUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    public delegate void GetPendingJobByEUMUserIDWithDateCompletedEventHandler(object sender, GetPendingJobByEUMUserIDWithDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPendingJobByEUMUserIDWithDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPendingJobByEUMUserIDWithDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591